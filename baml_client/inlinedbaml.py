###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.70.5\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "receipt.baml": "// MODELS\nclass ReceiptItem {\n  description string\n  quantity int\n  quantity_unit string? @description(#\"\n    Unit of measurement for the quantity.\n    \"#)\n  price float\n}\n\nclass Receipt {\n  line_items ReceiptItem[]\n  total_amount float\n  date string @description(#\"\n    Date of the transaction.\n    \"#)\n  time string @description(#\"\n    Time of the transaction in 24-hour format.\n    \"#)\n\n  business string @description(#\"\n    Name of the vendor or business that provided the receipt.\n  \"#)\n     currency_code string @description(#\"\n    ISO 4217 Currency code for the currency used in the transaction. Infer from address if no currency symbol, or common symbol used among different countries.\n    \"#)\n  address string?\n  payment_method string? @description(#\"\n    Method of payment used for the transaction.\n    \"#)\n}\n\n// FUNCTIONS\nfunction ExtractReceiptFromImage(img: image) -> Receipt {\n    client CustomGPT4oMini\n    prompt #\"\n        {{_.role(\"user\")}}\n        \n        Extract details from this image of a receipt: {{ img }}\n\n        The currency type may need to be inferred from the address info extracted. Example: 12345 Sunshine St, Sunnyville, CA 12345 is in the US, so return USD.\n\n        {{ ctx.output_format }}\n    \"#\n}\n\n// TESTS\nfunction ExtractReceiptFromText(raw_text: string) -> Receipt {\n  client CustomGPT4oMini\n  prompt #\"\n    Parse the following content for receipt details. The currency type may need to be inferred from the address info extracted.\n\n    Content:\n    ---\n    {{raw_text}}\n    ---\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\ntest Test_FRANCE_Receipt {\nfunctions [ExtractReceiptFromImage]\n  args {\n    img {\n      url \"https://res.cloudinary.com/dqjkf4zsf/image/upload/v1735354709/france_receipt.png\"\n    }\n  }\n}\n\ntest Test_UK_Receipt {\nfunctions [ExtractReceiptFromImage]\n  args {\n    img {\n      url \"https://res.cloudinary.com/dqjkf4zsf/image/upload/v1735354707/uk_receipt.png\"\n    }\n  }\n}\n\ntest Test_US_Receipt {\nfunctions [ExtractReceiptFromImage]\n  args {\n    img {\n      url \"https://res.cloudinary.com/dqjkf4zsf/image/upload/v1735352823/US_receipt.png\"\n    }\n  }\n}\n\ntest Test_MEXICO_Receipt {\nfunctions [ExtractReceiptFromImage]\n  args {\n    img {\n      url \"https://res.cloudinary.com/dqjkf4zsf/image/upload/v1735354706/mexico_receipt.png\"\n    }\n  }\n}\n\ntest Test_JAPAN_Receipt {\nfunctions [ExtractReceiptFromImage]\n  args {\n    img {\n      url \"https://res.cloudinary.com/dqjkf4zsf/image/upload/v1735603428/receipt_japan_2_f3w0cl.png\"\n    }\n  }\n}\n\n",
}

def get_baml_files():
    return file_map